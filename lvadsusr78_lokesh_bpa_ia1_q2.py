# -*- coding: utf-8 -*-
"""LVADSUSR78-Lokesh-BPA-IA1-Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qA_1T-61b9EucNphcRUodiTeAwQu4IDt
"""

from google.colab import drive
drive.mount('/content/drive')

#2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree

data = pd.read_csv("/content/drive/MyDrive/booking.csv")


# Null values Handling
# print("Null Values: ", data.isnull().sum())
data = data.dropna()

data = data.drop(['date of reservation'], axis = 1)


# Outliers handling
plt.boxplot(data['number of weekend nights'])
plt.title("Before")
plt.xlabel("number of weekend nights")
plt.show()

data = data[data['number of weekend nights']<=5]

plt.boxplot(data['number of weekend nights'])
plt.title("After")
plt.xlabel("number of weekend nights")
plt.show()



# Encoding categorical data
encoder = LabelEncoder()
data['Booking_ID'] = encoder.fit_transform(data['Booking_ID'])
data['type of meal'] = encoder.fit_transform(data['type of meal'])
data['room type'] = encoder.fit_transform(data['room type'])
data['market segment type'] = encoder.fit_transform(data['market segment type'])
data['booking status'] = encoder.fit_transform(data['booking status'])



# Duplicates handling
data.drop_duplicates()


# splitting data
x = data.drop(['booking status'], axis=1)
y = data['booking status']
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 42, test_size=0.2)


# model building
# logistic regression
model = LogisticRegression()
model.fit(x_train, y_train)
y_pred1 = model.predict(x_test)
print("Logistic Regression Performance Metrics :")
print("accuracy score :", metrics.accuracy_score(y_test, y_pred1)*100)
print("Precision :", metrics.precision_score(y_test, y_pred1, average='weighted'))
print("Recall :", metrics.recall_score(y_test, y_pred1, average='weighted'))
print("F1 score :", metrics.f1_score(y_test, y_pred1, average='weighted'))

matrix = metrics.ConfusionMatrixDisplay(metrics.confusion_matrix(y_test, y_pred1))
matrix.plot()
plt.title("Confusion matrix for Logistic Regression")
plt.show()


# decision tree classifier
tree_model = DecisionTreeClassifier()
tree_model.fit(x_train, y_train)
y_pred2 = tree_model.predict(x_test)

print("Decision Tree Classifier Performance Metrics:")
print("accuracy score of Decision Tree Classifier  :", metrics.accuracy_score(y_test, y_pred2)*100)
print("Precision :", metrics.precision_score(y_test, y_pred2, average='weighted'))
print("Recall :", metrics.recall_score(y_test, y_pred2, average='weighted'))
print("F1 score :", metrics.f1_score(y_test, y_pred2, average='weighted'))

matrix2 = metrics.ConfusionMatrixDisplay(metrics.confusion_matrix(y_test, y_pred2))
matrix2.plot()
plt.title("Confusion matrix for Decision Tree Classifier")
plt.show()